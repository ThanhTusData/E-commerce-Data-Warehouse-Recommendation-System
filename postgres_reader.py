import pandas as pd
import psycopg2
from sqlalchemy import create_engine
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate

class PostgreSQLDataReader:
    def __init__(self, host='localhost', port=5432, database='your_db', 
                 username='your_user', password='your_password'):
        """
        Kh·ªüi t·∫°o k·∫øt n·ªëi PostgreSQL
        """
        self.host = host
        self.port = port
        self.database = database
        self.username = username
        self.password = password
        
        # T·∫°o connection string
        self.connection_string = f"postgresql://{username}:{password}@{host}:{port}/{database}"
        self.engine = create_engine(self.connection_string)
        
    def test_connection(self):
        """Test k·∫øt n·ªëi PostgreSQL"""
        try:
            with self.engine.connect() as conn:
                result = conn.execute("SELECT version()")
                print("‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!")
                print(f"Database version: {result.fetchone()[0]}")
                return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def get_all_tables(self, schema='warehouse'):
        """L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng trong schema"""
        query = f"""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = '{schema}'
        ORDER BY table_name;
        """
        
        try:
            df = pd.read_sql(query, self.engine)
            tables = df['table_name'].tolist()
            print(f"üìã C√≥ {len(tables)} b·∫£ng trong schema '{schema}':")
            for i, table in enumerate(tables, 1):
                print(f"  {i}. {table}")
            return tables
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y danh s√°ch b·∫£ng: {e}")
            return []
    
    def get_table_info(self, table_name, schema='warehouse'):
        """L·∫•y th√¥ng tin c·∫•u tr√∫c b·∫£ng"""
        query = f"""
        SELECT 
            column_name,
            data_type,
            is_nullable,
            character_maximum_length
        FROM information_schema.columns 
        WHERE table_schema = '{schema}' AND table_name = '{table_name}'
        ORDER BY ordinal_position;
        """
        
        try:
            df = pd.read_sql(query, self.engine)
            print(f"\nüìä C·∫•u tr√∫c b·∫£ng '{table_name}':")
            print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=False))
            return df
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y th√¥ng tin b·∫£ng: {e}")
            return pd.DataFrame()
    
    def get_table_data(self, table_name, schema='warehouse'):
        """L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng"""
        query = f"SELECT * FROM {schema}.{table_name}"
        
        try:
            df = pd.read_sql(query, self.engine)
            print(f"\nüìà D·ªØ li·ªáu b·∫£ng '{table_name}':")
            print(f"T·ªïng s·ªë c·ªôt: {len(df.columns)}")
            print(f"S·ªë d√≤ng l·∫•y ƒë∆∞·ª£c: {len(df)}")
            print("\n" + "="*80)
            # print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=True))
            return df
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu: {e}")
            return pd.DataFrame()
    
    def get_table_count(self, table_name, schema='warehouse'):
        """ƒê·∫øm s·ªë d√≤ng trong b·∫£ng"""
        query = f"SELECT COUNT(*) as total_rows FROM {schema}.{table_name}"
        
        try:
            df = pd.read_sql(query, self.engine)
            count = df['total_rows'].iloc[0]
            print(f"üìä B·∫£ng '{table_name}' c√≥ {count:,} d√≤ng d·ªØ li·ªáu")
            return count
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·∫øm d·ªØ li·ªáu: {e}")
            return 0
    
    def get_table_summary(self, table_name, schema='warehouse'):
        """L·∫•y th·ªëng k√™ t·ªïng quan b·∫£ng"""
        df = self.get_table_data(table_name, schema)
        
        if not df.empty:
            print(f"\nüìä Th·ªëng k√™ b·∫£ng '{table_name}':")
            print(f"Shape: {df.shape}")
            print(f"Memory usage: {df.memory_usage(deep=True).sum() / 1024:.2f} KB")
            
            # Th·ªëng k√™ cho c·ªôt s·ªë
            numeric_cols = df.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                print(f"\nüî¢ Th·ªëng k√™ c·ªôt s·ªë:")
                print(df[numeric_cols].describe())
            
            # Th√¥ng tin missing values
            missing = df.isnull().sum()
            if missing.sum() > 0:
                print(f"\n‚ö†Ô∏è  Missing values:")
                for col, miss_count in missing[missing > 0].items():
                    print(f"  {col}: {miss_count} ({miss_count/len(df)*100:.1f}%)")
        
        return df
    
    def export_to_csv(self, table_name, schema='warehouse', output_file=None):
        """Export b·∫£ng ra file CSV"""
        if output_file is None:
            output_file = f"{table_name}_export.csv"
        
        query = f"SELECT * FROM {schema}.{table_name}"
        
        try:
            df = pd.read_sql(query, self.engine)
            df.to_csv(output_file, index=False, encoding='utf-8')
            print(f"‚úÖ ƒê√£ export {len(df)} d√≤ng t·ª´ b·∫£ng '{table_name}' ra file '{output_file}'")
            return output_file
        except Exception as e:
            print(f"‚ùå L·ªói export: {e}")
            return None
    
    def run_custom_query(self, query):
        """Ch·∫°y query t√πy ch·ªânh"""
        try:
            df = pd.read_sql(query, self.engine)
            print(f"‚úÖ Query th·ª±c hi·ªán th√†nh c√¥ng. K·∫øt qu·∫£: {df.shape}")
            print(tabulate(df, headers=df.columns, tablefmt='grid', showindex=True))
            return df
        except Exception as e:
            print(f"‚ùå L·ªói th·ª±c hi·ªán query: {e}")
            return pd.DataFrame()


# ====================== MAIN USAGE ======================
def main():
    """H√†m ch√≠nh ƒë·ªÉ s·ª≠ d·ª•ng"""
    
    # 1. C·∫•u h√¨nh k·∫øt n·ªëi (THAY ƒê·ªîI THEO SETUP C·ª¶A B·∫†N)
    db_config = {
        'host': 'localhost',
        'port': 5432,
        'database': 'your_database_name',  # Thay ƒë·ªïi
        'username': 'your_username',       # Thay ƒë·ªïi
        'password': 'your_password'        # Thay ƒë·ªïi
    }
    
    # 2. Kh·ªüi t·∫°o reader
    reader = PostgreSQLDataReader(**db_config)
    
    # 3. Test k·∫øt n·ªëi
    if not reader.test_connection():
        print("Kh√¥ng th·ªÉ k·∫øt n·ªëi database. Ki·ªÉm tra l·∫°i config!")
        return
    
    # 4. L·∫•y danh s√°ch t·∫•t c·∫£ b·∫£ng
    tables = reader.get_all_tables()
    
    if not tables:
        print("Kh√¥ng t√¨m th·∫•y b·∫£ng n√†o trong warehouse schema!")
        return
    
    # 5. Ch·ªçn b·∫£ng ƒë·ªÉ xem (c√≥ th·ªÉ thay ƒë·ªïi)
    print("\n" + "="*80)
    table_to_view = input(f"Nh·∫≠p t√™n b·∫£ng mu·ªën xem (ho·∫∑c Enter ƒë·ªÉ xem '{tables[0]}'): ").strip()
    
    if not table_to_view:
        table_to_view = tables[0]
    
    if table_to_view not in tables:
        print(f"‚ùå B·∫£ng '{table_to_view}' kh√¥ng t·ªìn t·∫°i!")
        return
    
    # 6. Hi·ªÉn th·ªã chi ti·∫øt b·∫£ng
    print(f"\nüîç PH√ÇN T√çCH B·∫¢NG: {table_to_view}")
    print("="*80)
    
    # Th√¥ng tin c·∫•u tr√∫c
    reader.get_table_info(table_to_view)
    
    # ƒê·∫øm s·ªë d√≤ng
    reader.get_table_count(table_to_view)
    
    # L·∫•y d·ªØ li·ªáu m·∫´u
    df = reader.get_table_data(table_to_view)
    
    # Th·ªëng k√™ t·ªïng quan
    reader.get_table_summary(table_to_view)
    
    # 7. T√πy ch·ªçn export
    export_choice = input("\nB·∫°n c√≥ mu·ªën export b·∫£ng n√†y ra CSV? (y/n): ").strip().lower()
    if export_choice == 'y':
        reader.export_to_csv(table_to_view)
    
    # 8. T√πy ch·ªçn ch·∫°y query custom
    custom_query = input("\nNh·∫≠p custom query (ho·∫∑c Enter ƒë·ªÉ b·ªè qua): ").strip()
    if custom_query:
        reader.run_custom_query(custom_query)
    
    print("\n‚úÖ Ho√†n th√†nh!")


# ====================== QUICK FUNCTIONS ======================
def quick_view_table(table_name):
    """H√†m nhanh ƒë·ªÉ xem 1 b·∫£ng"""
    db_config = {
        'host': 'localhost',
        'port': 5432, 
        'database': 'your_database_name',  # THAY ƒê·ªîI
        'username': 'your_username',       # THAY ƒê·ªîI  
        'password': 'your_password'        # THAY ƒê·ªîI
    }
    
    reader = PostgreSQLDataReader(**db_config)
    return reader.get_table_data(table_name)


def quick_query(query):
    """H√†m nhanh ƒë·ªÉ ch·∫°y query"""
    db_config = {
        'host': 'localhost',
        'port': 5432,
        'database': 'your_database_name',  # THAY ƒê·ªîI
        'username': 'your_username',       # THAY ƒê·ªîI
        'password': 'your_password'        # THAY ƒê·ªîI  
    }
    
    reader = PostgreSQLDataReader(**db_config)
    return reader.run_custom_query(query)


if __name__ == "__main__":
    main()


# ====================== EXAMPLES ======================
"""
C√ÅCH S·ª¨ D·ª§NG:

1. C√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt:
   pip install pandas psycopg2-binary sqlalchemy tabulate matplotlib seaborn

2. Thay ƒë·ªïi th√¥ng tin k·∫øt n·ªëi database trong db_config

3. Ch·∫°y script:
   python postgres_reader.py

4. Ho·∫∑c s·ª≠ d·ª•ng trong Jupyter:
   
   from postgres_reader import PostgreSQLDataReader
   
   reader = PostgreSQLDataReader(
       host='localhost',
       database='your_db', 
       username='user',
       password='pass'
   )
   
   # Xem t·∫•t c·∫£ b·∫£ng
   tables = reader.get_all_tables()
   
   # Xem d·ªØ li·ªáu b·∫£ng c·ª• th·ªÉ
   df = reader.get_table_data('stg_orders')
   
   # Ch·∫°y query t√πy ch·ªânh
   result = reader.run_custom_query('''
       SELECT COUNT(*) as total_orders, 
              AVG(payment_value) as avg_payment
       FROM warehouse.stg_orders o
       JOIN warehouse.stg_payments p ON o.order_id = p.order_id
   ''')

5. Quick usage:
   df = quick_view_table('stg_products')
   result = quick_query('SELECT * FROM warehouse.fact_orders ')
"""